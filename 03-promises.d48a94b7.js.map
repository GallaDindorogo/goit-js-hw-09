{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAGA,MAAMC,EAAO,CACXC,OAAQC,SAASC,cAAc,SAC/BC,QAASF,SAASC,cAAc,uBAChCE,OAAQH,SAASC,cAAc,sBAC/BG,SAAUJ,SAASC,cAAc,wBAcnC,SAASI,GAAUC,SAAEA,EAAQC,MAAEA,IAC7BX,EAAAY,OAAOC,QAAQ,uBAAqBH,QAAiBC,M,CAGvD,SAASG,GAASJ,SAAEA,EAAQC,MAAEA,IAC5BX,EAAAY,OAAOG,QAAQ,sBAAoBL,QAAeC,M,CAapD,SAASK,EAAcN,EAAUC,GAC/B,OAAO,IAAIM,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAER,E,MAAUC,IAEpBQ,EAAO,C,SAAET,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAtCbT,EAAKC,OAAOqB,iBAAiB,UAmB7B,SAAyBC,GACvBA,EAAEC,iBACF,MAAMf,EAAQgB,OAAOC,SAAS1B,EAAKI,QAAQuB,MAAO,IAC5CC,EAAOH,OAAOC,SAAS1B,EAAKK,OAAOsB,MAAO,IAC1CE,EAASJ,OAAOC,SAAS1B,EAAKM,SAASqB,MAAO,KApBtD,SAA2BlB,EAAOmB,EAAMC,GACtC,IAAK,IAAIC,EAAI,EAAOA,GAAKD,EAAQC,IAC/BhB,EAAcgB,EAAGrB,GAAOsB,KAAKxB,GAAWyB,MAAMpB,GAC9CH,GAASmB,C,CAkBXK,CAAkBxB,EAAOmB,EAAMC,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// Form and its inputs\nconst refs = {\n  formEl: document.querySelector('.form'),\n  delayEl: document.querySelector('input[name=\"delay\"]'),\n  stepEl: document.querySelector('input[name=\"step\"]'),\n  amountEl: document.querySelector('input[name=\"amount\"'),\n};\n\n// Event listener after submitting the form\nrefs.formEl.addEventListener('submit', onCreatePromise);\n\n// Loop to create promises from function createPromise\nfunction createAllPromises(delay, step, amount) {\n  for (let i = 0 + 1; i <= amount; i++) {\n    createPromise(i, delay).then(onResolve).catch(onReject);\n    delay += step;\n  }\n}\n\nfunction onResolve({ position, delay }) {\n  Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n}\n\nfunction onReject({ position, delay }) {\n  Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n}\n\n// Create promises after event listener\nfunction onCreatePromise(e) {\n  e.preventDefault();\n  const delay = Number.parseInt(refs.delayEl.value, 10);\n  const step = Number.parseInt(refs.stepEl.value, 10);\n  const amount = Number.parseInt(refs.amountEl.value, 10);\n  createAllPromises(delay, step, amount);\n}\n\n//function createPromise\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","formEl","document","querySelector","delayEl","stepEl","amountEl","$47d4ff9957288465$var$onResolve","position","delay","Notify","success","$47d4ff9957288465$var$onReject","failure","$47d4ff9957288465$var$createPromise","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","Number","parseInt","value","step","amount","i","then","catch","$47d4ff9957288465$var$createAllPromises"],"version":3,"file":"03-promises.d48a94b7.js.map"}