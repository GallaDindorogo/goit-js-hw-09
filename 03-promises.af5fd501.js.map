{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAGMC,EAAO,CACXC,OAAQC,SAASC,cAAc,SAC/BC,QAASF,SAASC,cAAc,uBAChCE,OAAQH,SAASC,cAAc,sBAC/BG,SAAUJ,SAASC,cAAc,wBAcnC,SAASI,EAAUC,G,IAAEC,EAAFD,EAAEC,SAAUC,EAAZF,EAAYE,MAC7BZ,EAAAa,OAAOC,QAAQ,uBAAwCC,OAAfJ,EAAS,QAAYI,OAANH,EAAM,M,CAG/D,SAASI,EAASN,G,IAAEC,EAAFD,EAAEC,SAAUC,EAAZF,EAAYE,MAC5BZ,EAAAa,OAAOI,QAAQ,sBAAqCF,OAAfJ,EAAS,QAAYI,OAANH,EAAM,M,CAa5D,SAASM,EAAcP,EAAUC,GAC/B,OAAO,IAAIO,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAET,WAAUC,UAEpBS,EAAO,CAAEV,WAAUC,S,GAEpBA,E,IAtCPV,EAAKC,OAAOuB,iBAAiB,UAmB7B,SAAyBC,GACvBA,EAAEC,iBACF,IAAMhB,EAAQiB,OAAOC,SAAS5B,EAAKI,QAAQyB,MAAO,IAC5CC,EAAOH,OAAOC,SAAS5B,EAAKK,OAAOwB,MAAO,IAC1CE,EAASJ,OAAOC,SAAS5B,EAAKM,SAASuB,MAAO,KApBtD,SAA2BnB,EAAOoB,EAAMC,GACtC,IAAK,IAAIC,EAAI,EAAOA,GAAKD,EAAQC,IAC/BhB,EAAcgB,EAAGtB,GAAOuB,KAAK1B,GAAW2B,MAAMpB,GAC9CJ,GAASoB,C,CAkBXK,CAAkBzB,EAAOoB,EAAMC,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// Form and its inputs\nconst refs = {\n  formEl: document.querySelector('.form'),\n  delayEl: document.querySelector('input[name=\"delay\"]'),\n  stepEl: document.querySelector('input[name=\"step\"]'),\n  amountEl: document.querySelector('input[name=\"amount\"'),\n};\n\n// Event listener after submitting the form\nrefs.formEl.addEventListener('submit', onCreatePromise);\n\n// Loop to create promises from function createPromise\nfunction createAllPromises(delay, step, amount) {\n  for (let i = 0 + 1; i <= amount; i++) {\n    createPromise(i, delay).then(onResolve).catch(onReject);\n    delay += step;\n  }\n}\n\nfunction onResolve({ position, delay }) {\n  Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n}\n\nfunction onReject({ position, delay }) {\n  Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n}\n\n// Create promises after event listener\nfunction onCreatePromise(e) {\n  e.preventDefault();\n  const delay = Number.parseInt(refs.delayEl.value, 10);\n  const step = Number.parseInt(refs.stepEl.value, 10);\n  const amount = Number.parseInt(refs.amountEl.value, 10);\n  createAllPromises(delay, step, amount);\n}\n\n//function createPromise\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","formEl","document","querySelector","delayEl","stepEl","amountEl","$ce04d3a99e08e73b$var$onResolve","param","position","delay","Notify","success","concat","$ce04d3a99e08e73b$var$onReject","failure","$ce04d3a99e08e73b$var$createPromise","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","Number","parseInt","value","step","amount","i","then","catch","$ce04d3a99e08e73b$var$createAllPromises"],"version":3,"file":"03-promises.af5fd501.js.map"}